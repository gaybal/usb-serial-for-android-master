import com.android.build.gradle.AppPlugin
import com.android.build.gradle.LibraryPlugin
import proguard.gradle.ProGuardTask

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

android {
    compileSdkVersion 25
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }


    task makeJar(dependsOn: ['compileReleaseJavaWithJavac'], type: Jar) {
        appendix = "demo"
        baseName = "androidJar"
        version = "1.0.0"
        classifier = "release"
        //后缀名
        extension = "jar"
        //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
        archiveName = "usb_serialport_20180318b02.jar"
        //需打包的资源所在的路径集
        def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
        //初始化资源路径集
        from srcClassDir
        //去除路径集下部分的资源
        exclude "com/yourPackegeName/game/BuildConfig.class"
        exclude "**/R.class"
        exclude "**/R\$*.class"
        //只导入资源路径集下的部分资源
        include "com/android/usbport/*.class"
        include "com/hoho/android/usbserial/driver/**.class"
        include "com/hoho/android/usbserial/util/*.class"
    }


    task proguardJar(dependsOn: ['makeJar'], type: ProGuardTask) {
        //Android 默认的 proguard 文件
        // configuration android.getDefaultProguardFile('proguard-android.txt')
        //manifest 注册的组件对应的 proguard 文件
        configuration 'proguard-rules.pro'
        String inJar = makeJar.archivePath.getAbsolutePath()
        //输入 jar
        injars inJar
        //输出 jar
        outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + "/proguard-${makeJar.archiveName}"
        //设置不删除未引用的资源(类，方法等)
        dontshrink
        Plugin plugin = getPlugins().hasPlugin(AppPlugin) ?
                getPlugins().findPlugin(AppPlugin) :
                getPlugins().findPlugin(LibraryPlugin)
        if (plugin != null) {
            List<String> runtimeJarList
            if (plugin.getMetaClass().getMetaMethod("getRuntimeJarList")) {
                runtimeJarList = plugin.getRuntimeJarList()
            } else if (android.getMetaClass().getMetaMethod("getBootClasspath")) {
                runtimeJarList = android.getBootClasspath()
            } else {
                runtimeJarList = plugin.getBootClasspath()
            }
            for (String runtimeJar : runtimeJarList) {
                //给 proguard 添加 runtime
                libraryjars(runtimeJar)
            }
        }
    }
}

group = "com.hoho.android"
version = "0.2.0-SNAPSHOT"

configurations {
    archives {
        extendsFrom configurations.default
    }
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

def getRepositoryUsername() {
    return hasProperty('sonatypeUsername') ? sonatypeUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('sonatypePassword') ? sonatypePassword : ""
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

uploadArchives {
    def sonatypeRepositoryUrl
    if (isReleaseBuild()) {
        println 'RELEASE BUILD'
        sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    } else {
        println 'SNAPSHOT BUILD'
        sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                : "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: sonatypeRepositoryUrl) {
            authentication(userName: getRepositoryUsername(),
                    password: getRepositoryPassword())
        }

        pom.artifactId = 'usb-serial-for-android'
        pom.project {
            name 'usb-serial-for-android'
            packaging 'aar'
            description 'USB Serial Driver Library for Android'
            url 'https://github.com/mik3y/usb-serial-for-android'

            scm {
                url 'scm:git@github.com:mik3y/usb-serial-for-android.git'
                connection 'scm:git@github.com:mik3y/usb-serial-for-android.git'
                developerConnection 'scm:git@github.com:mik3y/usb-serial-for-android.git'
            }

            licenses {
                license {
                    name 'GNU LGPL v2.1'
                    url 'http://www.gnu.org/licenses/lgpl-2.1.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'mik3y'
                    name 'mik3y'
                    email 'opensource@hoho.com'
                }
            }
        }
    }
}
